version: '3.8'

services:
  db:
    image: postgres:14-alpine
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 1m
      timeout: 15s
      retries: 3
      start_period: 45s
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=flight_booking
    ports:
      - "5432:5432"
    networks:
      - app-network

  prestart:
    image: "${DOCKER_IMAGE_BACKEND}:${TAG:-latest}"
    restart: on-failure
    build:
      context: ./backend
    command: ["bash", "scripts/prestart.sh"]
    depends_on:
      db:
        condition: service_healthy
        restart: true
    env_file:
      - .env
    environment:
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY:?Variable not set}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER:?Variable not set}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD:?Variable not set}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT:?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB:?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER:?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?Variable not set}

  backend:
    image: "${DOCKER_IMAGE_BACKEND}:${TAG:-latest}"
    restart: always
    build:
      context: ./backend
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
        restart: true
      prestart:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY:?Variable not set}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER:?Variable not set}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD:?Variable not set}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT:?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB:?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER:?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?Variable not set}
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/flight_booking
      - JWT_SECRET=your_jwt_secret
      - VNPAY_TMN_CODE=your_vnpay_tmn_code
      - VNPAY_HASH_SECRET=your_vnpay_hash_secret
      - VNPAY_RETURN_URL=http://localhost:3000/payment/callback
      - NODE_ENV=development
    ports:
      - "8000:8000"
    networks:
      - app-network

  frontend:
    image: "${DOCKER_IMAGE_FRONTEND}:${TAG:-latest}"
    restart: always
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - app-network
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api
      - REACT_APP_VNPAY_RETURN_URL=http://localhost:3000/payment/callback

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
